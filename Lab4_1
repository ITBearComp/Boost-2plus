#include <iostream>
#include <chrono>
#include <cstdlib>
#include <cuda_runtime.h>

// CPU implementation
void matrixMultiplyCPU(float* A, float* B, float* C, int M, int N, int P) {
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < P; ++j) {
            float sum = 0.0f;
            for (int k = 0; k < N; ++k) {
                sum += A[i * N + k] * B[k * P + j];
            }
            C[i * P + j] = sum;
        }
    }
}

// GPU kernel
__global__ void matrixMultiplyCUDA(float* A, float* B, float* C, int M, int N, int P) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < M && col < P) {
        float sum = 0.0f;
        for (int k = 0; k < N; ++k) {
            sum += A[row * N + k] * B[k * P + col];
        }
        C[row * P + col] = sum;
    }
}

// Function to initialize matrix with random values
void initializeMatrix(float* matrix, int rows, int cols) {
    for (int i = 0; i < rows * cols; ++i) {
        matrix[i] = static_cast<float>(rand()) / RAND_MAX;
    }
}

// Function to compare two matrices
bool compareMatrices(float* A, float* B, int rows, int cols, float epsilon = 1e-5) {
    for (int i = 0; i < rows * cols; ++i) {
        if (fabs(A[i] - B[i]) > epsilon) {
            std::cout << "Mismatch at position " << i << ": " << A[i] << " vs " << B[i] << std::endl;
            return false;
        }
    }
    return true;
}

int main() {
    // Matrix dimensions
    const int M = 512;
    const int N = 512;
    const int P = 512;
    
    // Allocate host memory
    float *h_A = new float[M * N];
    float *h_B = new float[N * P];
    float *h_C_cpu = new float[M * P];
    float *h_C_gpu = new float[M * P];
    
    // Initialize matrices
    initializeMatrix(h_A, M, N);
    initializeMatrix(h_B, N, P);
    
    // CPU computation
    auto start_cpu = std::chrono::high_resolution_clock::now();
    matrixMultiplyCPU(h_A, h_B, h_C_cpu, M, N, P);
    auto end_cpu = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> cpu_time = end_cpu - start_cpu;
    
    std::cout << "CPU time: " << cpu_time.count() << " seconds" << std::endl;
    
    // GPU computation
    float *d_A, *d_B, *d_C;
    
    // Allocate device memory
    cudaMalloc(&d_A, M * N * sizeof(float));
    cudaMalloc(&d_B, N * P * sizeof(float));
    cudaMalloc(&d_C, M * P * sizeof(float));
    
    // Copy data to device
    cudaMemcpy(d_A, h_A, M * N * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, N * P * sizeof(float), cudaMemcpyHostToDevice);
    
    // Define block and grid dimensions
    dim3 blockSize(16, 16);
    dim3 gridSize((P + blockSize.x - 1) / blockSize.x, 
                  (M + blockSize.y - 1) / blockSize.y);
    
    // Create CUDA events for timing
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    
    // Record start event
    cudaEventRecord(start);
    
    // Launch kernel
    matrixMultiplyCUDA<<<gridSize, blockSize>>>(d_A, d_B, d_C, M, N, P);
    
    // Record stop event
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);
    
    // Calculate elapsed time
    float gpu_time = 0;
    cudaEventElapsedTime(&gpu_time, start, stop);
    
    std::cout << "GPU time: " << gpu_time / 1000 << " seconds" << std::endl;
    
    // Copy result back to host
    cudaMemcpy(h_C_gpu, d_C, M * P * sizeof(float), cudaMemcpyDeviceToHost);
    
    // Compare results
    if (compareMatrices(h_C_cpu, h_C_gpu, M, P)) {
        std::cout << "Results match!" << std::endl;
    } else {
        std::cout << "Results don't match!" << std::endl;
    }
    
    // Cleanup
    delete[] h_A;
    delete[] h_B;
    delete[] h_C_cpu;
    delete[] h_C_gpu;
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    
    return 0;
}
